import json
from datetime import datetime, timedelta

import pytz
import requests

from database.schemas import User, UserRel
from settings import settings
from server.logger import logger


async def generate_invite_link(user: User) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
    expire_date = datetime.now(tz=pytz.timezone('Europe/Moscow')) + timedelta(days=1)
    name = user.username if user.username else user.firstname
    response = requests.post(
        url='https://api.telegram.org/bot{0}/{1}'.format(settings.bot_token, "createChatInviteLink"),
        data={
            "chat_id": settings.channel_id,
            "name": name,
            "expire_date": int(expire_date.timestamp()),
            "member_limit": 1,
        }
    )
    invite_link = response.json()["result"]["invite_link"]

    return invite_link


async def send_invite_link_to_user(chat_id: int, link: str, expire_date: datetime) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
    text = "–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –ø–∏—Ç–∞–Ω–∏–µ–º –æ—Ç –®–µ–≤—ã:\n\n" \
           f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–∞</b>\n\n–°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ - <b>{expire_date.date().strftime('%d.%m.%Y')}</b>\n" \
           "<i>*–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞</i>\n\n" \
           "–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª\n\n" \
           "‚Üì‚Üì‚Üì"

    response = requests.post(
        url='https://api.telegram.org/bot{0}/{1}'.format(settings.bot_token, "sendMessage"),
        data={'chat_id': chat_id,
              'text': text,
              'parse_mode': "HTML",
              "reply_markup": json.dumps(
                  {"inline_keyboard": [
                      [{"text": "üîó–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", "url": link}],
                      [{"text": "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "callback_data": "main_menu"}]

                  ]},
                  separators=(',', ':'))
              }
    ).json()


async def send_error_message_to_user(chat_id: int) -> None:
    """–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–µ—É—Å–ø–µ—à–Ω–æ–º –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ"""
    text = "‚õîÔ∏è –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.\n\n–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –ø—Ä–µ–∫—Ä–∞—â—ë–Ω.\n\n" \
           "–í–æ–∑–º–æ–∂–Ω–æ —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ, –ª–∏–±–æ –≤–∞—à–∞ –∫–∞—Ä—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.\n\n" \
           "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ"

    response = requests.post(
        url='https://api.telegram.org/bot{0}/{1}'.format(settings.bot_token, "sendMessage"),
        data={
            'chat_id': chat_id,
            'parse_mode': "HTML",
            'text': text,
            "reply_markup": json.dumps(
                {"inline_keyboard": [
                    [{"text": "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "subscribe"}]
                ]},
                separators=(',', ':'))
              }
    ).json()


async def buy_subscription_error(chat_id: int) -> None:
    """–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    text = "‚õîÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏.\n\n " \
           "–í–æ–∑–º–æ–∂–Ω–æ —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ, –ª–∏–±–æ –≤–∞—à–∞ –∫–∞—Ä—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.\n\n" \
           "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ –ø–æ–∑–∂–µ"

    response = requests.post(
        url='https://api.telegram.org/bot{0}/{1}'.format(settings.bot_token, "sendMessage"),
        data={'chat_id': chat_id,
              'parse_mode': "HTML",
              'text': text,
              "reply_markup": json.dumps(
                  {"inline_keyboard": [
                      [{"text": "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "subscribe"}]
                  ]},
                  separators=(',', ':'))
              }
    ).json()


async def send_auto_pay_error_message_to_user(user: UserRel) -> None:
    """–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ–ø–ª–∞—Ç–µ"""
    sub_expire_date_phrase = datetime.strftime(user.subscription[0].expire_date - timedelta(days=1, hours=1), '%d.%m –≤ %H:%M')
    date_next_payment_phare = datetime.strftime(user.subscription[0].expire_date - timedelta(hours=2), '%d.%m %H:%M')

    msg_for_client = f"‚ö†Ô∏è –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É —Å–∫–æ—Ä–æ –ø—Ä–æ–ø–∞–¥—ë—Ç\n\n" \
          f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç <b>{sub_expire_date_phrase} (–ú–°–ö)</b>, –æ–¥–Ω–∞–∫–æ —Å–ø–∏—Å–∞–Ω–∏–µ —Å –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –Ω–µ —É–¥–∞–ª–æ—Å—å." \
          f"–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–æ <b>{date_next_payment_phare} (–ú–°–ö)</b>.\n\n" \
          f"–ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –≤–æ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑, –Ω–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–ª—é—á–∏—Ç –≤–∞—Å " \
          f"–∏ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç."

    msg_for_admin = f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è tg_id: {user.tg_id}, phone: {user.phone} –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –¥–µ–Ω—å–≥–∏ 1 —Ä–∞–∑\n" \
          f"–ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç {sub_expire_date_phrase} (–ú–°–ö)\n" \
          f"–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–æ {date_next_payment_phare} (–ú–°–ö)"

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    response = requests.post(
        url='https://api.telegram.org/bot{0}/{1}'.format(settings.bot_token, "sendMessage"),
        data={
            'chat_id': user.tg_id,
            'parse_mode': "HTML",
            'text': msg_for_client,
        }
    ).json()

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    response = requests.post(
        url='https://api.telegram.org/bot{0}/{1}'.format(settings.bot_token, "sendMessage"),
        data={
            'chat_id': settings.admins[0],
            'parse_mode': "HTML",
            'text': msg_for_admin,
        }
    ).json()


async def send_success_message_to_user(chat_id: int, expire_date: datetime) -> None:
    """–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
    response = requests.post(
        url='https://api.telegram.org/bot{0}/{1}'.format(settings.bot_token, "sendMessage"),
        data={'chat_id': chat_id,
              'parse_mode': "HTML",
              'text': f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ <b>{expire_date.date().strftime("%d.%m.%Y")}</b>',
              }
    ).json()


async def delete_user_from_channel(channel_id: int, user_id: int) -> None:
    """–ö–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    response = requests.post(
        url='https://api.telegram.org/bot{0}/{1}'.format(settings.bot_token, "banChatMember"),
        data={
            'chat_id': channel_id,
            'user_id': user_id,
        }
    ).json()

    _ = requests.post(
        url='https://api.telegram.org/bot{0}/{1}'.format(settings.bot_token, "unbanChatMember"),
        data={
            'chat_id': channel_id,
            'user_id': user_id,
        }
    ).json()

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å tg_id {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞")

